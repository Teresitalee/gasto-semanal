{"version":3,"sources":["components/Error.js","components/Pregunta.js","components/Formulario.js","components/Gasto.js","components/Listado.js","Helper.js","components/ControlPresupuesto.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Pregunta","guardarRestante","guardarPresupuesto","actualizarPregunta","useState","cantidad","guardarCantidad","error","guardarError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Formulario","guardarGasto","guardarCreargasto","nombre","guadarNombre","trim","gasto","id","shortid","generate","Gasto","Listado","gastos","map","key","revisarPresupuesto","presupuesto","restante","ControlPresupuesto","App","mostrarpregunta","guardarGastos","creargasto","useEffect","presupuestoRestante","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e0b107d7.chunk.js","sourcesContent":["import React from 'react';\n\nconst Error = ({mensaje}) => (\n<p className=\"alert alert-danger error\"> {mensaje}</p>\n   );\n \nexport default Error;","import React , { Fragment , useState } from 'react';\nimport Error from './Error';\n\nconst Pregunta = ( {guardarRestante, guardarPresupuesto, actualizarPregunta }) => {\n\n    // definir el state (estado)\n    const [ cantidad , guardarCantidad ] = useState(0);\n    const [ error, guardarError ] = useState(false);\n    \n\n    // funcion que lee el presupuesto\n    const definirPresupuesto = e => {\n       guardarCantidad( parseInt(e.target.value, 10) )\n    }\n\n    //submit para definir el presupuesto\n    const agregarPresupuesto = e => {\n        e.preventDefault();\n\n        //validar \n        if (cantidad < 1 || isNaN( cantidad ) ) {\n            guardarError(true);              \n            return;\n        }\n\n\n        // si pasa la validacion\n        guardarError(false);\n        guardarPresupuesto(cantidad);\n        guardarRestante(cantidad);\n        actualizarPregunta(false);\n    }\n\n    \n\n\n    return ( \n        <Fragment>\n            <h2 className=\"title\"> Controla tu bolsillo</h2>\n    \n            { error ? <Error mensaje=\" El Presupuesto es incorrecto\" /> : null }\n\n            <form\n              onSubmit={agregarPresupuesto}\n            >\n              \n\n                <input \n                    type=\"number\"\n                    className=\"u-full-width\"\n                    placeholder=\"Cuanto quieres gastar ?\"\n                    onChange={definirPresupuesto}\n                />\n\n                <input\n                   type=\"submit\"\n                   className=\"button-primary u-full-width\"\n                   value=\"definir presupuesto\"\n                   \n                />\n\n            </form>\n        </Fragment>\n\n\n     );\n}\n \nexport default Pregunta;\n\n\n\n","import React, { useState } from 'react';\nimport Error from './Error';\nimport shortid from 'shortid';\n\n\nconst Formulario = ({guardarGasto, guardarCreargasto}) => {\n\n    // state de gastos\n    const [nombre, guadarNombre] = useState('');\n    const [cantidad, guardarCantidad] = useState(0);\n    const [error, guardarError] = useState(false);\n\n    // cuando el usuario agrega un gasto\n    const agregarGasto = e => {\n        e.preventDefault();\n\n\n        // validar\n        if(cantidad < 1 || isNaN( cantidad) || nombre.trim() === '') {\n            guardarError(true);\n            return;\n        }\n        guardarError(false);\n\n\n        // construir el gasto\n        const gasto = {\n            nombre,\n            cantidad,\n            id: shortid.generate()\n        }\n\n\n        // pasar el gasto al componente principal\n        guardarGasto(gasto);\n        guardarCreargasto(true);\n\n\n        // resetear el form\n        guadarNombre('');\n        guardarCantidad(0);\n\n    }\n\n\n    \n    return ( \n        <form\n            onSubmit={agregarGasto}\n        >\n            <h2>Agrega tus gastos aqu√≠</h2>\n            \n            {error ? <Error mensaje=\"Ambos campos son obligatorios\" /> : null }\n\n            <div className=\"campo\">\n                <label>Nombre Gasto</label>\n                <input\n                   type=\"text\"\n                   className=\"u-full-width\"\n                   placeholder=\"Ej. supermercado\"\n                   value={nombre}\n                   onChange={e => guadarNombre(e.target.value)}\n                />\n            </div>\n\n\n            <div className=\"campo\">\n                <label>Cantidad Gasto</label>\n                <input\n                   type=\"number\"\n                   className=\"u-full-width\"\n                   placeholder=\"Ej. $ 200\"\n                   value={cantidad}\n                   onChange={e => guardarCantidad( parseInt( e.target.value, 10 ) )}\n                />\n            </div>\n\n            <input\n               type=\"submit\"\n               className=\"button-primary u-full-width\"\n               value=\"Agregar gasto\"\n            />\n\n        </form>\n     );\n}\n \nexport default Formulario;\n\n","import React from 'react';\n\nconst Gasto = ({gasto}) =>  ( \n    <li className=\"gastos\">\n        <p>\n           {gasto.nombre}\n\n           <span className=\"gasto\">$ {gasto.cantidad}</span>\n        </p>\n    </li>\n );\n\n \nexport default Gasto;","import React from 'react';\nimport Gasto from './Gasto';\n/// documentar\n\n\nconst Listado = ({gastos}) => (\n    <div className=\"gastos-realizados\">\n        <h2>Listado</h2>\n        {gastos.map(gasto => (\n            <Gasto\n               key={gasto.id}\n               gasto={gasto} \n            \n            />\n\n        ))}\n        \n    </div>\n  );\n\n \nexport default Listado;","export const revisarPresupuesto = (presupuesto, restante) => {\n    let porcentaje;\n\n    if ( ( presupuesto / 4 ) > restante ){\n        porcentaje = 'alert alert-danger';\n    } else if ( ( presupuesto / 2) > restante ){\n        porcentaje = 'alert alert-warning';\n    } else {\n        porcentaje = 'alert alert-success';\n    }\n\n    return porcentaje;\n\n}\n","import React, { Fragment } from 'react';\nimport { revisarPresupuesto } from '../Helper';\n\nconst ControlPresupuesto = ({presupuesto , restante}) => {\n    return ( \n        <Fragment>\n            <div className=\"alert alert-primary\">\n                Presupuesto: $ {presupuesto} \n            </div>\n            <div className={revisarPresupuesto(presupuesto, restante)}>\n                Restante: $ {restante}\n            </div>\n        </Fragment>\n\n\n     );\n}\n \nexport default ControlPresupuesto ;","import React, { useState, useEffect } from 'react';\nimport Pregunta from './components/Pregunta';\nimport Formulario from './components/Formulario';\nimport Listado from './components/Listado';\nimport ControlPresupuesto from './components/ControlPresupuesto';\n\nfunction App() {\n\n  // definir state\n\n  const [ presupuesto, guardarPresupuesto ] = useState(0);\n  const [ restante, guardarRestante ] = useState(0);\n  const [ mostrarpregunta, actualizarPregunta ] = useState(true);\n  const [ gastos, guardarGastos ] = useState([]);\n  const [ gasto, guardarGasto ] = useState({});\n  const [ creargasto, guardarCreargasto ] = useState(false);\n\n\n  // useEffect; que actualiza el restante\n  useEffect(() => {\n    if(creargasto) {\n\n      // agrega el nuevo presupuesto\n       guardarGastos([\n         ...gastos,\n          gasto\n       ]);\n\n       // resta el presupuesto actual\n       const presupuestoRestante = restante - gasto.cantidad; \n       guardarRestante(presupuestoRestante);\n\n\n\n       // Resetear a False\n       guardarCreargasto(false);\n\n    }\n  }, [gasto, creargasto, gastos, restante]);\n\n    \n    \n  return (\n   <div className=\"container\">\n     <header>\n       <h1>Control de gastos semanal</h1>\n       <div className=\"contenido-principal contenido\">\n         { mostrarpregunta ? \n            ( \n              <Pregunta \n                guardarPresupuesto={guardarPresupuesto}\n                guardarRestante={guardarRestante}\n                actualizarPregunta={actualizarPregunta}\n              />\n\n            ) : (\n              <div className=\"row\">\n                <div className=\"one-half column\">\n                  <Formulario\n                  guardarGasto={guardarGasto}\n                  guardarCreargasto={guardarCreargasto}\n                  \n                  />\n                </div>\n                \n                <div className=\"one-half column\">\n                  <Listado\n                  gastos={gastos}\n\n                  />\n\n                  <ControlPresupuesto\n                    presupuesto={presupuesto}\n                    restante={restante}\n                  />\n                </div>\n              </div>\n            ) \n          }  \n       </div>\n     </header>\n   </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}